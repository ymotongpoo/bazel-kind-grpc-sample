// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fib.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetFibonacciRequest struct {
	Nth                  int64    `protobuf:"varint,1,opt,name=nth,proto3" json:"nth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFibonacciRequest) Reset()         { *m = GetFibonacciRequest{} }
func (m *GetFibonacciRequest) String() string { return proto.CompactTextString(m) }
func (*GetFibonacciRequest) ProtoMessage()    {}
func (*GetFibonacciRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db00d511e02f9dc, []int{0}
}

func (m *GetFibonacciRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFibonacciRequest.Unmarshal(m, b)
}
func (m *GetFibonacciRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFibonacciRequest.Marshal(b, m, deterministic)
}
func (m *GetFibonacciRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFibonacciRequest.Merge(m, src)
}
func (m *GetFibonacciRequest) XXX_Size() int {
	return xxx_messageInfo_GetFibonacciRequest.Size(m)
}
func (m *GetFibonacciRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFibonacciRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFibonacciRequest proto.InternalMessageInfo

func (m *GetFibonacciRequest) GetNth() int64 {
	if m != nil {
		return m.Nth
	}
	return 0
}

type GetNthResponse struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNthResponse) Reset()         { *m = GetNthResponse{} }
func (m *GetNthResponse) String() string { return proto.CompactTextString(m) }
func (*GetNthResponse) ProtoMessage()    {}
func (*GetNthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db00d511e02f9dc, []int{1}
}

func (m *GetNthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNthResponse.Unmarshal(m, b)
}
func (m *GetNthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNthResponse.Marshal(b, m, deterministic)
}
func (m *GetNthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNthResponse.Merge(m, src)
}
func (m *GetNthResponse) XXX_Size() int {
	return xxx_messageInfo_GetNthResponse.Size(m)
}
func (m *GetNthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNthResponse proto.InternalMessageInfo

func (m *GetNthResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type GetListUntilNthResponse struct {
	Numbers              []int64  `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetListUntilNthResponse) Reset()         { *m = GetListUntilNthResponse{} }
func (m *GetListUntilNthResponse) String() string { return proto.CompactTextString(m) }
func (*GetListUntilNthResponse) ProtoMessage()    {}
func (*GetListUntilNthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db00d511e02f9dc, []int{2}
}

func (m *GetListUntilNthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetListUntilNthResponse.Unmarshal(m, b)
}
func (m *GetListUntilNthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetListUntilNthResponse.Marshal(b, m, deterministic)
}
func (m *GetListUntilNthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListUntilNthResponse.Merge(m, src)
}
func (m *GetListUntilNthResponse) XXX_Size() int {
	return xxx_messageInfo_GetListUntilNthResponse.Size(m)
}
func (m *GetListUntilNthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListUntilNthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetListUntilNthResponse proto.InternalMessageInfo

func (m *GetListUntilNthResponse) GetNumbers() []int64 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func init() {
	proto.RegisterType((*GetFibonacciRequest)(nil), "fibonacci.GetFibonacciRequest")
	proto.RegisterType((*GetNthResponse)(nil), "fibonacci.GetNthResponse")
	proto.RegisterType((*GetListUntilNthResponse)(nil), "fibonacci.GetListUntilNthResponse")
}

func init() { proto.RegisterFile("fib.proto", fileDescriptor_2db00d511e02f9dc) }

var fileDescriptor_2db00d511e02f9dc = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcb, 0x4c, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x02, 0x31, 0xf3, 0xf3, 0x12, 0x93, 0x93, 0x33, 0x95, 0xd4,
	0xb9, 0x84, 0xdd, 0x53, 0x4b, 0xdc, 0x60, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x01, 0x2e, 0xe6, 0xbc, 0x92, 0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x10, 0x53, 0x49,
	0x83, 0x8b, 0xcf, 0x3d, 0xb5, 0xc4, 0xaf, 0x24, 0x23, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0x55, 0x48, 0x8c, 0x8b, 0x2d, 0xaf, 0x34, 0x37, 0x29, 0xb5, 0x08, 0xaa, 0x0c, 0xca, 0x53, 0x32,
	0xe6, 0x12, 0x77, 0x4f, 0x2d, 0xf1, 0xc9, 0x2c, 0x2e, 0x09, 0xcd, 0x2b, 0xc9, 0xcc, 0x41, 0xd6,
	0x22, 0xc1, 0xc5, 0x0e, 0x51, 0x54, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x1c, 0x04, 0xe3, 0x1a,
	0x6d, 0x62, 0xe4, 0x12, 0x70, 0xcb, 0x2c, 0x82, 0xb8, 0x22, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39,
	0x55, 0xc8, 0x95, 0x8b, 0x0d, 0x62, 0xa7, 0x90, 0x9c, 0x1e, 0xdc, 0xc9, 0x7a, 0x58, 0xdc, 0x2b,
	0x25, 0x89, 0x2a, 0x8f, 0x64, 0xa7, 0x12, 0x83, 0x50, 0x38, 0x17, 0x3f, 0x9a, 0x83, 0x08, 0x9a,
	0xa7, 0x84, 0x2a, 0x8f, 0xcd, 0x33, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0xe0, 0x34, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xa4, 0x9f, 0x63, 0x4b, 0x5b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FironacciServiceClient is the client API for FironacciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FironacciServiceClient interface {
	GetNth(ctx context.Context, in *GetFibonacciRequest, opts ...grpc.CallOption) (*GetNthResponse, error)
	GetListUntilNth(ctx context.Context, in *GetFibonacciRequest, opts ...grpc.CallOption) (*GetListUntilNthResponse, error)
}

type fironacciServiceClient struct {
	cc *grpc.ClientConn
}

func NewFironacciServiceClient(cc *grpc.ClientConn) FironacciServiceClient {
	return &fironacciServiceClient{cc}
}

func (c *fironacciServiceClient) GetNth(ctx context.Context, in *GetFibonacciRequest, opts ...grpc.CallOption) (*GetNthResponse, error) {
	out := new(GetNthResponse)
	err := c.cc.Invoke(ctx, "/fibonacci.FironacciService/GetNth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fironacciServiceClient) GetListUntilNth(ctx context.Context, in *GetFibonacciRequest, opts ...grpc.CallOption) (*GetListUntilNthResponse, error) {
	out := new(GetListUntilNthResponse)
	err := c.cc.Invoke(ctx, "/fibonacci.FironacciService/GetListUntilNth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FironacciServiceServer is the server API for FironacciService service.
type FironacciServiceServer interface {
	GetNth(context.Context, *GetFibonacciRequest) (*GetNthResponse, error)
	GetListUntilNth(context.Context, *GetFibonacciRequest) (*GetListUntilNthResponse, error)
}

// UnimplementedFironacciServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFironacciServiceServer struct {
}

func (*UnimplementedFironacciServiceServer) GetNth(ctx context.Context, req *GetFibonacciRequest) (*GetNthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNth not implemented")
}
func (*UnimplementedFironacciServiceServer) GetListUntilNth(ctx context.Context, req *GetFibonacciRequest) (*GetListUntilNthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUntilNth not implemented")
}

func RegisterFironacciServiceServer(s *grpc.Server, srv FironacciServiceServer) {
	s.RegisterService(&_FironacciService_serviceDesc, srv)
}

func _FironacciService_GetNth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FironacciServiceServer).GetNth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.FironacciService/GetNth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FironacciServiceServer).GetNth(ctx, req.(*GetFibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FironacciService_GetListUntilNth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FironacciServiceServer).GetListUntilNth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.FironacciService/GetListUntilNth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FironacciServiceServer).GetListUntilNth(ctx, req.(*GetFibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FironacciService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.FironacciService",
	HandlerType: (*FironacciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNth",
			Handler:    _FironacciService_GetNth_Handler,
		},
		{
			MethodName: "GetListUntilNth",
			Handler:    _FironacciService_GetListUntilNth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fib.proto",
}
